name: "scp-wa-backend"

concurrency:  
  group: ${{ github.event.client_payload.repo_name }}-${{ github.event.client_payload.branch }}
  cancel-in-progress: true

on:
  repository_dispatch:
    types: 
      - scp-wa-backend 

env:
  GL_PAT: ${{ secrets.GL_PAT }}
  PAYLOAD: ${{ toJSON(github.event.client_payload) }}
  GIT_URL: ${{ github.event.client_payload.git_url }}
  REPO: ${{ github.event.client_payload.repo_name }}
  BRANCH: ${{ github.event.client_payload.branch || 'master' }}
  SHA: ${{ github.event.client_payload.sha }}
  SERVICE: "swab"

jobs:
  prepare:
    runs-on: ubuntu-18.04
    outputs:
      short_sha: ${{ steps.short_sha.outputs.value }}
      formatted_branch: ${{ steps.formatted_branch.outputs.value }}
      migrate_cmd: ${{ steps.migrate_cmd.outputs.value }}
    steps:
      - name: Short SHA
        shell: bash
        id: short_sha
        run: echo "::set-output name=value::$(echo "$SHA" | head -c7)" 

      - name: Run migrate or not 
        shell: bash
        env:
          COMMIT_MESSAGE: "${{ github.event.client_payload.commit_message }}"
        id: migrate_cmd
        run: |
          if [[ "$COMMIT_MESSAGE" = db* ]] || [[ "$COMMIT_MESSAGE" = migrate* ]]; then
            echo "::set-output name=value::docker-compose up migrate-up"  
          fi
          
      - name: Format current branch
        shell: bash
        id: formatted_branch
        run: |
          branch="$(echo "$BRANCH" | sed 's/[^a-zA-Z0-9]/-/g' | sed 's/--*/-/g' | sed 's/-$//g')"
          echo "::set-output name=value::$branch"

  build:
    needs:
      - prepare
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        shell: bash
        env:
          GIT_DEPTH: 1
        run: git clone --depth $GIT_DEPTH --single-branch --branch $BRANCH https://oauth2:$GL_PAT@$GIT_URL .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Docker login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ env.SERVICE }}-buildx

      - name: Get build date
        id: build_date
        run: echo "::set-output name=value::$(date +%FT%T%z)"

      - name: Build and push
        uses: docker/build-push-action@v2
        env:
          IMAGE: "vietanhs0817/${{ env.SERVICE }}"
          BUILD_DATE: "${{ steps.build_date.outputs.value }}"
          FORMATTED_BRANCH: ${{ needs.prepare.outputs.formatted_branch }}
          SHORT_SHA: ${{ needs.prepare.outputs.short_sha }}
        with:
          context: .
          push: true
          build-args: |
            VERSION=${{ env.VERSION_TAG }}
            GIT_HASH=${{ env.SHA }}
            BUILD_DATE=${{ env.BUILD_DATE }}
          labels: |
            org.label-schema.schema-version=1.0
            org.label-schema.vcs-ref=${{ env.SHA }}
            org.label-schema.name=${{ env.SERVICE }}
          tags: |
            ${{ env.IMAGE }}:${{ env.FORMATTED_BRANCH }}
            ${{ env.IMAGE }}:${{ env.FORMATTED_BRANCH }}-${{ env.SHORT_SHA }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move Docker cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs:
      - prepare
      - build
    runs-on: ubuntu-18.04
    env:
      FORMATTED_BRANCH: ${{ needs.prepare.outputs.formatted_branch }}
      SHORT_SHA: ${{ needs.prepare.outputs.short_sha }}
      MIGRATE_CMD: ${{ needs.prepare.outputs.migrate_cmd }}
    steps:
      - name: Migrate 
        if: needs.prepare.outputs.migrate_cmd != ''
        uses: appleboy/ssh-action@master
        env:
          IMAGE: "vietanhs0817/${{ env.SERVICE }}:${{ env.FORMATTED_BRANCH }}-${{ env.SHORT_SHA }}"
          HOSTS: ${{ secrets[format('{0}_AUTH_HOSTS', env.FORMATTED_BRANCH)]}} 
        with:
          host: ${{ env.HOSTS }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            cd scp-wa-server
            sed -i 's|^IMAGE=.*$|IMAGE=${{ env.IMAGE }}|g' .env
            docker-compose pull
            ${{ env.MIGRATE_CMD }}

      - name: Deploy
        uses: appleboy/ssh-action@master
        env:
          IMAGE: "vietanhs0817/${{ env.SERVICE }}:${{ env.FORMATTED_BRANCH }}-${{ env.SHORT_SHA }}"
          HOSTS: ${{ secrets[format('{0}_AUTH_HOSTS', env.FORMATTED_BRANCH)]}} 
        with:
          host: ${{ env.HOSTS }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            cd scp-wa-server
            sed -i 's|^IMAGE=.*$|IMAGE=${{ env.IMAGE }}|g' .env
            docker-compose pull
            docker-compose up -d server

  notify: 
    name: notify
    if: always()
    needs:
      - prepare
      - build
      - deploy
    uses: vietanhduong/the-bridge/.github/workflows/notify.yaml@main
    with:
      needs_context: ${{ toJSON(needs) }}
      client_payload: ${{ toJSON(github.event.client_payload) }}
    secrets:
      telegram_bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      telegram_group_id: ${{ secrets.TELEGRAM_GROUP_ID }}
    
